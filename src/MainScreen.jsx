import React, { useState, useCallback, useEffect, useRef } from 'react';
import LootWindow from './components/LootWindow';

export default function MainScreen() {
  const [logs, setLogs] = useState([]);
  const [isLootWindowOpen, setIsLootWindowOpen] = useState(false);
  const [isGeneratingEvents, setIsGeneratingEvents] = useState(false);
  const timeoutRef = useRef(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
  const [equipment, setEquipment] = useState({
    helmet: null,
    armor: null,
    weapon: null,
    backpack: []
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∞
  const addLog = useCallback((message) => {
    const now = new Date();
    const timeString = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`;
    
    setLogs(prevLogs => [{
      time: timeString,
      message: message
    }, ...prevLogs]);

    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(`[${timeString}] ${message}`);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
  const placeItem = useCallback((item) => {
    setEquipment(prev => {
      const newEquipment = { ...prev };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª–æ–∂–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ—Ç
      if (item.category === 'Helmet' && !prev.helmet) {
        newEquipment.helmet = item;
        addLog(`–≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω ${item.name}`);
      } else if (item.category === 'Armor' && !prev.armor) {
        newEquipment.armor = item;
        addLog(`–≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω ${item.name}`);
      } else if (item.category === 'Weapon' && !prev.weapon) {
        newEquipment.weapon = item;
        addLog(`–≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω ${item.name}`);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä—é–∫–∑–∞–∫–∞
        newEquipment.backpack = [...prev.backpack, item];
        addLog(`${item.name} –ø–æ–º–µ—â–µ–Ω –≤ —Ä—é–∫–∑–∞–∫`);
      }

      return newEquipment;
    });
  }, [addLog]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π
  const generateEvent = useCallback(() => {
    console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è');
    setIsLootWindowOpen(true);
    addLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã');
    setIsGeneratingEvents(false);
  }, [addLog]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    if (isGeneratingEvents && !isLootWindowOpen) {
      const delay = 1000 + Math.random() * 4000;
      console.log(`–ü–ª–∞–Ω–∏—Ä—É—é —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ ${Math.round(delay/1000)} —Å–µ–∫—É–Ω–¥`);
      
      timeoutRef.current = setTimeout(() => {
        generateEvent();
      }, delay);

      return () => {
        if (timeoutRef.current) {
          clearTimeout(timeoutRef.current);
        }
      };
    }
  }, [isGeneratingEvents, isLootWindowOpen, generateEvent]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', {
      isGeneratingEvents,
      isLootWindowOpen,
      logsCount: logs.length
    });
  }, [isGeneratingEvents, isLootWindowOpen, logs]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ GO
  const handleGoClick = useCallback(() => {
    console.log('–ö–Ω–æ–ø–∫–∞ GO –Ω–∞–∂–∞—Ç–∞');
    addLog('–ò–≥—Ä–æ–∫ –Ω–∞—á–∞–ª —Ä–µ–π–¥');
    setIsGeneratingEvents(true);
  }, [addLog]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–∫–Ω–∞ –ª—É—Ç–∞
  const handleCloseLoot = useCallback(() => {
    console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ª—É—Ç–∞');
    setIsLootWindowOpen(false);
    addLog('–ò–≥—Ä–æ–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤');
    setIsGeneratingEvents(true);
  }, [addLog]);

  const handleTakeLoot = useCallback((items) => {
    console.log('–í–∑—è—Ç–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', items);
    items.forEach(placeItem);
    setIsLootWindowOpen(false);
    setIsGeneratingEvents(true);
  }, [placeItem]);

  const renderEquipmentSlot = (item, placeholder) => (
    <div className="bg-white p-4 aspect-square flex items-center justify-center">
      <span className={item ? 'text-green-600 font-medium' : 'text-gray-400'}>
        {item ? item.name : placeholder}
      </span>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-900 flex justify-center">
      <div className="w-[600px] bg-gray-800 text-black relative">
        {/* Header */}
        <div className="flex justify-between items-center p-4 bg-white">
          <div className="text-2xl">üè†</div>
          <div className="text-2xl">üîç</div>
        </div>

        {/* Equipment Grid */}
        <div className="p-4 bg-gray-600">
          <div className="grid grid-cols-3 gap-4">
            <div className="col-span-1">
              <div className="grid grid-cols-2 gap-2">
                <div className="bg-white p-4 aspect-square flex items-center justify-center">
                  <span>Earpiece</span>
                </div>
                {renderEquipmentSlot(equipment.helmet, 'Helmet')}
                {renderEquipmentSlot(equipment.armor, 'Body armor')}
              </div>
              {renderEquipmentSlot(equipment.weapon, 'Weapon')}
            </div>
            
            <div className="col-span-2">
              <div className="bg-white p-4 h-40 mb-2 flex items-center justify-center">
                <span>Tactical Rig</span>
              </div>
              <div className="bg-white p-4 h-40 flex flex-col items-center justify-center">
                <span>Backpack</span>
                {equipment.backpack.length > 0 && (
                  <div className="text-sm text-gray-600 mt-2">
                    {equipment.backpack.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Log Section or Loot Window */}
        <div className="bg-white mt-2 p-4 h-64">
          {isLootWindowOpen ? (
            <LootWindow
              onClose={handleCloseLoot}
              onTakeLoot={handleTakeLoot}
            />
          ) : (
            <div className="overflow-y-auto h-full">
              {logs.map((log, index) => (
                <div key={index} className="mb-1 font-mono">
                  <span className="text-gray-600">{log.time}</span> {log.message}
                </div>
              ))}
              {logs.length === 0 && (
                <div className="text-gray-400 text-center">
                  –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Go —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–π–¥
                </div>
              )}
            </div>
          )}
        </div>

        {/* Go Button */}
        <div className="sticky bottom-0 left-0 right-0 p-4 bg-gray-800">
          <button 
            onClick={handleGoClick}
            disabled={isGeneratingEvents}
            className={`
              w-full py-3 rounded-lg text-xl
              ${isGeneratingEvents 
                ? 'bg-gray-600 text-gray-400 cursor-not-allowed' 
                : 'bg-blue-600 text-white hover:bg-blue-700 transition-colors'}
            `}
          >
            {isGeneratingEvents ? '–†–µ–π–¥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...' : 'Go'}
          </button>
        </div>
      </div>
    </div>
  );
} 